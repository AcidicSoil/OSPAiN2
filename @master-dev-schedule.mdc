---
description: 
globs: 
alwaysApply: true
---
---
description: Weekly schedule and time management framework for the Master Developer
globs: 
alwaysApply: false
---

# Master Developer Weekly Schedule

## Overview

This schedule provides a structured framework for the Master Developer to maintain productivity, ensure project progress, and balance various responsibilities across the Ollama ecosystem. The schedule is designed to optimize deep work periods while providing adequate time for collaboration, review, and strategic planning.

## Weekly Schedule

### Monday - Strategic Planning & Alignment

| Time       | Activity                                   | Focus                                            |
|------------|--------------------------------------------|-------------------------------------------------|
| 08:00-09:00| **Horizon Review**                         | Review and update horizon classifications        |
| 09:00-10:30| **Weekly Planning Session**                | Set priorities and goals for the week            |
| 10:30-12:00| **Design Mode - System Architecture**      | Work on high-level architecture decisions        |
| 12:00-12:30| _Break_                                    |                                                  |
| 12:30-14:00| **Engineering Mode - Core Infrastructure** | Implement or refine core system components       |
| 14:00-15:30| **Team Sync & Collaboration**              | Sync with team members or external collaborators |
| 15:30-17:00| **Documentation Review & Updates**         | Update documentation based on weekly plan        |
| 17:00-17:30| **Daily Reflection & Task Management**     | Update tasks and log progress                    |

### Tuesday - Engineering Focus Day

| Time       | Activity                                   | Focus                                            |
|------------|--------------------------------------------|-------------------------------------------------|
| 08:00-08:30| **Daily Planning**                         | Review and adjust daily priorities               |
| 08:30-10:30| **Engineering Mode - Deep Work I**         | Core implementation of high-priority features    |
| 10:30-10:45| _Short Break_                              |                                                  |
| 10:45-12:30| **Engineering Mode - Deep Work II**        | Continue implementation work                     |
| 12:30-13:00| _Break_                                    |                                                  |
| 13:00-15:00| **Engineering Mode - Integration**         | System integration and component connections     |
| 15:00-16:30| **Code Review & Refinement**               | Review code, address issues, optimize            |
| 16:30-17:00| **Documentation Updates**                  | Document new implementations                     |
| 17:00-17:30| **Daily Reflection & Task Management**     | Update tasks and log progress                    |

### Wednesday - Design & Innovation

| Time       | Activity                                   | Focus                                            |
|------------|--------------------------------------------|-------------------------------------------------|
| 08:00-08:30| **Daily Planning**                         | Review and adjust daily priorities               |
| 08:30-10:30| **Design Mode - User Experience**          | Design interfaces and user interactions          |
| 10:30-10:45| _Short Break_                              |                                                  |
| 10:45-12:30| **Research & Exploration**                 | Investigate new technologies or approaches       |
| 12:30-13:00| _Break_                                    |                                                  |
| 13:00-15:00| **Prototyping & Experimentation**          | Build prototypes for new concepts                |
| 15:00-16:30| **Design Review & Refinement**             | Review designs, collect feedback                 |
| 16:30-17:00| **Documentation - Design Patterns**        | Document design decisions and patterns           |
| 17:00-17:30| **Daily Reflection & Task Management**     | Update tasks and log progress                    |

### Thursday - Engineering Execution

| Time       | Activity                                   | Focus                                            |
|------------|--------------------------------------------|-------------------------------------------------|
| 08:00-08:30| **Daily Planning**                         | Review and adjust daily priorities               |
| 08:30-10:30| **Engineering Mode - Implementation**      | Continue building core features                  |
| 10:30-10:45| _Short Break_                              |                                                  |
| 10:45-12:30| **Testing Mode - Testing & QA**            | Test new implementations                         |
| 12:30-13:00| _Break_                                    |                                                  |
| 13:00-15:00| **Engineering Mode - Bug Fixing**          | Address issues from testing                      |
| 15:00-16:30| **Engineering Mode - Optimization**        | Performance improvements                         |
| 16:30-17:00| **Documentation - Technical Specs**        | Update technical documentation                   |
| 17:00-17:30| **Daily Reflection & Task Management**     | Update tasks and log progress                    |

### Friday - Integration & Reflection

| Time       | Activity                                   | Focus                                            |
|------------|--------------------------------------------|-------------------------------------------------|
| 08:00-08:30| **Daily Planning**                         | Review and adjust daily priorities               |
| 08:30-10:30| **Integration & System Testing**           | Ensure all components work together              |
| 10:30-11:30| **Demo Preparation**                       | Prepare demos of completed work                  |
| 11:30-12:30| **Weekly Demo/Review**                     | Review completed work, demonstrate features      |
| 12:30-13:00| _Break_                                    |                                                  |
| 13:00-14:30| **Maintenance Mode - Cleanup**             | Code cleanup, refactoring, tech debt             |
| 14:30-16:00| **Weekly Retrospective**                   | Reflect on what went well/could be improved      |
| 16:00-17:00| **Planning For Next Week**                 | Initial planning for upcoming week               |
| 17:00-17:30| **Weekly Wrap-up & Documentation**         | Finalize documentation and weekly report         |

## Flexible Time Blocks

These blocks can be scheduled as needed throughout the week:

- **Agent Competition System Development** - 3-4 hours weekly focused specifically on evolving this system
- **Pair Programming/Mentoring** - 2-3 hours for collaboration with team members
- **Learning & Skill Development** - 2-3 hours for staying current with new technologies
- **Community Engagement** - 1-2 hours for engaging with the open-source community
- **Strategic Planning** - 2 hours for long-term planning and roadmap development

## Mode Tracking

Track time spent in each development mode:
- üé® **Design Mode**: ~8 hours weekly
- üîß **Engineering Mode**: ~16 hours weekly
- üß™ **Testing Mode**: ~4 hours weekly
- üì¶ **Deployment Mode**: ~2 hours weekly
- üîç **Maintenance Mode**: ~4 hours weekly

## Work Environment Guidelines

- **Deep Work Periods**: Enable Do Not Disturb mode, close email/messaging
- **Meeting Guidelines**: Keep meetings focused with clear agendas
- **Context Switching**: Minimize context switching, batch similar tasks
- **Tools & Setup**: Ensure all development tools are properly configured
- **Documentation**: Document as you go, not as an afterthought

## Adaptation Guidelines

This schedule should be adapted based on:
- Current project priorities
- Upcoming deadlines
- Team needs
- Personal productivity patterns

Review and adjust this schedule monthly to ensure it remains effective and aligned with evolving project needs.

## Metrics & Progress Tracking

- Track completed tasks in the master-todo.mdc file
- Monitor time spent in each development mode
- Record velocity on key projects
- Document roadblocks and their resolutions
- Update horizon classifications weekly 

## Development Tools Integration

### Git Visualization System

A custom Git visualization system provides granular views and ultimate control over repository information:

#### Core Features
- **Inline Blame Annotations**: See who last modified each line directly in the editor
- **File History View**: Track all changes to files over time with branch visualization
- **Git CodeLens**: View authorship information above functions and classes
- **Commit Graph**: Visual representation of the repository's history
- **Heatmap Visualization**: Age-based heat mapping to identify older vs. newer code
- **Comparison Tools**: Side-by-side diff views for any two points in history

#### Implementation Horizons
- **H1**: Basic GitLens configuration via VS Code settings
- **H2**: Core Git data retrieval and basic visualization
- **H3**: Complete custom Git visualization system with all features

#### Integration Points
- **Daily Reports**: Git metrics automatically included in daily reports
- **Code Reviews**: Enhanced visibility into code history during reviews
- **Documentation**: Automatic tracking of documentation changes

### Automated Reporting

The reporting system integrates with development processes to provide:

- **Daily Task Reports**: Summarize completed tasks, blockers, and plans
- **Weekly Progress Reports**: Track velocity and milestone progress 
- **Documentation Status**: Monitor documentation coverage and freshness
- **Metrics Dashboard**: Visualize development patterns and team performance

## Master Documentation Inline Tab

<div class="inline-tabs">
  <div class="tab-header">
    <button class="tab-button active" onclick="switchTab('master-todo')">Master TODO</button>
    <button class="tab-button" onclick="switchTab('horizon-map')">Horizon Map</button>
    <button class="tab-button" onclick="switchTab('parking-lot')">Parking Lot</button>
    <button class="tab-button" onclick="switchTab('git-workflow')">Git Workflow</button>
    <button class="tab-button" onclick="switchTab('dev-tools')">Development Tools</button>
  </div>
  
  <div id="master-todo" class="tab-content active">
    <h3>Master TODO</h3>
    <p>The central task management document that contains all tasks across horizons and categories.</p>
    <ul>
      <li>Current active tasks: Items marked with üü° [H1] In Progress</li>
      <li>Next priority: Items marked with üî¥ [H1] Not Started</li>
      <li>Recently completed: Items marked with üü¢ [H1] Completed</li>
    </ul>
    <p><a href="master-todo.mdc">Open Master TODO</a></p>
  </div>
  
  <div id="horizon-map" class="tab-content">
    <h3>Horizon Map</h3>
    <p>The horizon classification system organizes work into three distinct timeframes:</p>
    <ul>
      <li><strong>Horizon 1 (Now)</strong>: Features and concepts actively being implemented</li>
      <li><strong>Horizon 2 (Next)</strong>: Concepts cleared for planning but not implementation</li>
      <li><strong>Horizon 3 (Future)</strong>: Ideas captured but deliberately kept at a distance</li>
    </ul>
    <p><a href="@horizon-map.mdc">Open Horizon Map</a></p>
  </div>
  
  <div id="parking-lot" class="tab-content">
    <h3>Parking Lot</h3>
    <p>A collection of future ideas and concepts that have been captured but are intentionally set aside to maintain focus on current priorities.</p>
    <ul>
      <li>New concepts should be added here before consideration for horizon promotion</li>
      <li>Regular review during horizon ceremonies ensures valuable ideas aren't lost</li>
    </ul>
    <p><a href="@parking-lot.mdc">Open Parking Lot</a></p>
  </div>
  
  <div id="git-workflow" class="tab-content">
    <h3>Git Workflow</h3>
    <p>Standardized Git processes for maintaining code quality and collaboration:</p>
    <ul>
      <li><strong>Commit Message Format</strong>: <code>[MODE][H1][TASK-ID] Brief description of changes</code></li>
      <li><strong>Branch Naming</strong>: <code>[horizon]-[task-id]-[brief-descriptor]</code></li>
      <li><strong>Pull Request Template</strong>: Includes horizon context, changes summary, and testing details</li>
      <li><strong>Code Review Process</strong>: Utilizes Git visualization tools to understand context and history</li>
    </ul>
  </div>
  
  <div id="dev-tools" class="tab-content">
    <h3>Development Tools</h3>
    <p>Tools and utilities that enhance the development workflow:</p>
    <ul>
      <li><strong>Git Visualization</strong>: Custom implementation of GitLens-like features for code history tracking</li>
      <li><strong>Automated Reporting</strong>: Daily and weekly report generation for progress tracking</li>
      <li><strong>Documentation Enforcer</strong>: Ensures documentation keeps pace with code changes</li>
      <li><strong>Task Agent System</strong>: Automates routine development tasks and provides assistance</li>
    </ul>
    <p><a href="git-visualization/README.md">Git Visualization Documentation</a></p>
  </div>
</div>

<style>
.inline-tabs {
  border: 1px solid #ddd;
  border-radius: 4px;
  overflow: hidden;
  margin: 20px 0;
}

.tab-header {
  display: flex;
  background-color: #f5f5f5;
  border-bottom: 1px solid #ddd;
  flex-wrap: wrap;
}

.tab-button {
  padding: 10px 15px;
  border: none;
  background: none;
  cursor: pointer;
  font-weight: 500;
  transition: background-color 0.3s;
}

.tab-button:hover {
  background-color: #e9e9e9;
}

.tab-button.active {
  background-color: #fff;
  border-bottom: 2px solid #0078d7;
}

.tab-content {
  display: none;
  padding: 15px;
  background-color: #fff;
}

.tab-content.active {
  display: block;
}
</style>

<script>
function switchTab(tabId) {
  // Hide all tab contents
  const tabContents = document.querySelectorAll('.tab-content');
  tabContents.forEach(tab => {
    tab.classList.remove('active');
  });
  
  // Deactivate all buttons
  const tabButtons = document.querySelectorAll('.tab-button');
  tabButtons.forEach(button => {
    button.classList.remove('active');
  });
  
  // Activate the selected tab and button
  document.getElementById(tabId).classList.add('active');
  document.querySelector(`[onclick="switchTab('${tabId}')"]`).classList.add('active');
}
</script> 