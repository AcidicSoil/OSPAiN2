---
description: Strategic commands and prompts for efficient codebase navigation and task execution
globs: 
alwaysApply: true
---

# Master Player Guide - Fast Track Commands

This document contains the most efficient commands and strategies for common tasks in the Ollama Ecosystem project. Use these to quickly navigate complex situations and perform tasks with minimal effort.

## Todo Management

### Adding Todo Items

The fastest way to add a todo item to all master todo files:

```bash
t2p todo add --priority <1-5> --horizon <H1|H2|H3> --category "<Category>" --tags "<tag1,tag2>" --title "<Title>" --description "<Description>"
```

Example:
```bash
t2p todo add --priority 2 --horizon H1 --category "Documentation" --tags "instructions" --title "Update instruction documentation" --description "Add missing information to instruction documentation"
```

### Listing and Filtering Todos

Quick todo listing with filters:

```bash
t2p todo list --priority <1-5> --horizon <H1|H2|H3> --status <status> --tags "<tags>"
```

Example:
```bash
t2p todo list --priority 1 --horizon H1 --status "in-progress"
```

## Development Mode Management

### Switching Development Modes

Switch between modes with reason:

```bash
m switch <mode> "<reason>"
```

Example:
```bash
m switch design "Starting UI design for new feature"
```

### Getting Mode Context

Get current mode context for chat:

```bash
m context --copy
```

## Documentation Management

### Convert MD to MDC Format

```bash
./md-to-mdc.sh <source-file.md>
```

### Adding Documentation Tasks

```bash
t2p todo add --priority 2 --horizon H1 --category "Documentation" --tags "docs" --title "<Title>" --description "<Description>"
```

## Project Navigation

### Finding Files

Find files using fuzzy search:

```bash
find . -type f -name "*<partial-name>*" | grep -v "node_modules" | grep -v ".git"
```

### Searching File Contents

Search in files recursively:

```bash
grep -r "<search-term>" --include="*.{js,ts,md,mdc}" . --color
```

## Note Management

### Creating Notes

Create new note with optional AI assistance:

```bash
t2p note new "<Title>" --tags "<tags>" --category "<category>"
t2p note new --ai "<prompt>"  # Generate content with AI
```

### Listing Notes

```bash
t2p note list --tag "<tag>" --category "<category>" --search "<term>"
```

## Emergency Codebase Analysis

When facing a complex, unfamiliar codebase:

```bash
find . -type f -not -path "*/node_modules/*" -not -path "*/.git/*" | sort -r | xargs wc -l | sort -nr | head -20
find . -name "README.md" -o -name "*.mdc" | grep -v "node_modules" | xargs cat | grep -i "purpose\|overview\|architecture"
```

## Paranoid Mode - Survival Tactics

When faced with incomplete information or unclear structure:

1. **Quick Health Check**:
   ```bash
   t2p todo list --priority 1 --horizon H1
   m current
   ```

2. **Orient in Codebase**:
   ```bash
   cat */README.md 2>/dev/null | grep -i "purpose\|overview"
   ```

3. **Find Entry Points**:
   ```bash
   find . -name "package.json" -o -name "main.js" -o -name "index.js" | grep -v "node_modules"
   ```

4. **Identify Core Tools**:
   ```bash
   find . -type f -name "*.sh" | grep -v "node_modules" | sort
   ```

5. **Last Resort**: When all else fails, add a documentation task and solve systematically:
   ```bash
   t2p todo add --priority 1 --horizon H1 --category "Documentation" --tags "architecture" --title "Create codebase architecture guide" --description "Document core components and workflows"
   ```

## Context Switching

Quick project refresh after context switch:

```bash
m current && t2p todo list --priority 1 --status "in-progress" && cat */README.md | grep -A 10 "Overview"
```

## Remember

1. **Always use t2p for todo/task management** - It's the purpose-built tool that handles synchronization
2. **Mode switching should be explicit** - Use the "m" command
3. **Documentation is structured by horizons and categories** - Follow the pattern
4. **The right command saves minutes to hours** - Learn these patterns well

## Command Error Prevention

### Common Mistakes to Avoid

| Incorrect Command | Issue | Correct Command |
|------------------|-------|-----------------|
| `[200~cp file.txt dir/` | Terminal error with bracket prefix | `cp file.txt dir/` |
| `cat > file << 'EOF'` + multiple lines | Multi-line commands in Cursor terminal | Use `edit_file` tool instead |
| `sed -i -e '/pattern/c\replacement'` | Complex sed with newlines | Use `edit_file` or create temporary script |
| `./script.sh` when not executable | Permission denied | First run `chmod +x script.sh` |
| `command with > redirect` | Output redirection issues | Consider using a temporary file or `edit_file` |
| `grep pattern | command` | Piping may fail in Cursor terminal | Store results in temp file first |

### Git Bash Terminal Issues in Windows

In the Windows environment with Git Bash, commands may be prefixed with `[200~` causing them to fail. This is a terminal bracketed paste mode issue.

**Problem diagnosis**:
- Command output shows something like: `bash: [200~command: command not found`
- Commands appear to have strange brackets at the beginning

**Solutions**:
1. **Use the edit_file tool** instead of terminal commands for file operations
2. **Create simple batch/shell scripts** and execute them
3. **Break complex operations** into smaller, simpler commands
4. **Use t2p CLI tools** which are designed to work in this environment

### Key Rules

1. **Avoid multi-line commands** in Cursor terminal - use temporary files or `edit_file` tool
2. **Check for strange prefixes** ([200~ etc.) that may be added by terminal emulation
3. **Use simple commands** that don't require redirection or complex pipes
4. **Verify file paths** exist before trying to access them
5. **For complex file editing** use the `edit_file` tool rather than sed/awk
6. **For any failing command** try simpler alternatives or break into multiple commands 

## Horizon Delegation Protocols

### Horizon Authority Levels

| Horizon | Authority | Description |
|---------|-----------|-------------|
| H1 (Now) | Implementation Team | Current focus tasks can be managed by the implementation team |
| H2 (Next) | Project Lead + Implementation Team | Next phase tasks require project lead approval |
| H3 (Future) | Strategic Team | Future horizon tasks must be delegated by the strategic team only |

### Command Templates for Horizon Management

```bash
# Delegate H3 task to strategic team
t2p todo add --priority <1-5> --horizon H3 --delegate strategic --category "<Category>" --title "<Title>" --description "<Description>"

# Accept delegation of H3 task (strategic team only)
t2p todo update <task-id> --accept-delegation --authority strategic

# Promote task from H3 to H2 (strategic team only)
t2p todo update <task-id> --promote-horizon --authority strategic
```

### Safety Protocols

1. **Avoid direct H3 assignment** - AI assistants and implementation team should never sign off on H3 tasks directly
2. **Document horizon transitions** - All horizon promotions must include proper documentation
3. **Maintain delegation chain** - Keep record of who delegated and approved horizon changes
4. **Verify authority** - Check authority level before allowing horizon modifications 