{
  "project": {
    "name": "ollama-ecosystem",
    "version": "1.0.0",
    "description": "Interconnected Ollama-based applications and tools"
  },
  "mcp_servers": [
    {
      "name": "Browser Tools MCP",
      "description": "Monitor browser logs, capture screenshots, and run audits directly from Cursor",
      "command": "npx @agentdeskai/browser-tools-mcp@1.2.0",
      "url": "http://localhost:8587/",
      "autostart": false
    }
  ],
  "ecosystem": {
    "core_components": {
      "ollama_tag_cli": {
        "path": "ollama-tag-cli",
        "entry": "src/index.ts",
        "description": "Tag management system for ecosystem context",
        "dependencies": []
      }
    },
    "applications": {
      "ollama_hub": {
        "path": "OllamaHub",
        "status": "in_development",
        "dependencies": ["ollama_tag_cli"]
      },
      "ollama_insights": {
        "path": "OllamaInsights",
        "status": "in_development",
        "dependencies": ["ollama_tag_cli"]
      }
    },
    "shared": {
      "services": {
        "ollama_service": {
          "path": "src/services/ollamaService.ts",
          "type": "singleton",
          "consumers": ["*"]
        }
      },
      "ui_components": {
        "path": "src/index.ts",
        "exports": [
          "EnhancedDropdown",
          "OllamaModelBrowser",
          "FuseIntegrationTest"
        ]
      }
    }
  },
  "integration": {
    "tag_system": {
      "categories": ["models", "configs", "projects", "technology", "status"],
      "memory_enhanced": false,
      "context_router": true
    },
    "mcp_tools": {
      "enabled": true,
      "memory_server": "knowledge_graph",
      "context_protocol": "1.0.0"
    }
  },
  "development": {
    "documentation": {
      "required_files": [
        "README.md",
        "docs/design_schematics.md",
        "docs/qa_guide.md",
        "docs/tag_system_guidelines.md"
      ]
    },
    "code_organization": {
      "src": "Source code",
      "docs": "Documentation",
      "tests": "Test files"
    },
    "standards": {
      "typescript": {
        "strict": true,
        "format": "prettier"
      }
    }
  },
  "version": 1,
  "servers": [
    {
      "name": "Content Summarizer",
      "type": "sse",
      "url": "http://localhost:3004/sse",
      "description": "MCP server for text summarization with various styles and local LLM integration"
    },
    {
      "name": "Prompt Engineering Assistant",
      "type": "sse",
      "url": "http://localhost:3001/sse",
      "description": "MCP server for prompt engineering and text summarization"
    },
    {
      "name": "Docker Integration",
      "type": "sse",
      "url": "http://localhost:3002/sse",
      "description": "MCP server for Docker container interactions"
    },
    {
      "name": "Mouse Automation",
      "type": "sse",
      "url": "http://localhost:3003/sse",
      "description": "MCP server for mouse and keyboard automation"
    },
    {
      "name": "Knowledge Graph",
      "type": "command",
      "command": "node",
      "args": [
        "/c/Users/comfy/Projects/mcp-knowledge-graph/dist/index.js",
        "--memory-path",
        "./data/memory.jsonl"
      ],
      "description": "MCP server for knowledge graph and entity relationship management"
    },
    {
      "name": "repository-tools",
      "path": "${workspaceFolder}/src/mcp-servers/repository-tools/repository-tools-server.ts",
      "run_command": "ts-node ${workspaceFolder}/src/mcp-servers/repository-tools/repository-tools-server.ts",
      "description": "Repository ingestion and context generation tools using Repomix, GitIngest, and CodeFetch",
      "tools": [
        {
          "name": "pack_repository",
          "description": "Pack a Git repository into an AI-friendly format for context generation using Repomix",
          "parameters": {
            "type": "object",
            "properties": {
              "repoUrl": {
                "type": "string",
                "description": "URL of the Git repository to pack"
              },
              "format": {
                "type": "string",
                "enum": ["json", "markdown", "plain"],
                "description": "Output format for the packed repository",
                "default": "json"
              },
              "branch": {
                "type": "string",
                "description": "Branch to pack",
                "default": "main"
              },
              "excludePaths": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Paths to exclude from the packed repository"
              }
            },
            "required": ["repoUrl"]
          }
        },
        {
          "name": "analyze_repository",
          "description": "Analyze a Git repository to extract insights and structure using GitIngest",
          "parameters": {
            "type": "object",
            "properties": {
              "repoUrl": {
                "type": "string",
                "description": "URL of the Git repository to analyze"
              },
              "branch": {
                "type": "string",
                "description": "Branch to analyze",
                "default": "main"
              },
              "depth": {
                "type": "number",
                "description": "Depth of analysis (1-5)",
                "default": 1
              },
              "analysisType": {
                "type": "string",
                "enum": ["full", "structure", "dependencies", "code"],
                "description": "Type of analysis to perform",
                "default": "full"
              }
            },
            "required": ["repoUrl"]
          }
        },
        {
          "name": "fetch_code",
          "description": "Fetch specific code files or snippets from a repository using CodeFetch",
          "parameters": {
            "type": "object",
            "properties": {
              "repoUrl": {
                "type": "string",
                "description": "URL of the Git repository"
              },
              "path": {
                "type": "string",
                "description": "Path to the file or directory to fetch"
              },
              "branch": {
                "type": "string",
                "description": "Branch to fetch from",
                "default": "main"
              },
              "outputFormat": {
                "type": "string",
                "enum": ["text", "json", "markdown"],
                "description": "Format for the fetched code",
                "default": "text"
              }
            },
            "required": ["repoUrl", "path"]
          }
        },
        {
          "name": "generate_context",
          "description": "Generate context from a repository for use in prompts and conversations",
          "parameters": {
            "type": "object",
            "properties": {
              "repoUrl": {
                "type": "string",
                "description": "URL of the Git repository"
              },
              "contextType": {
                "type": "string",
                "enum": [
                  "default",
                  "code",
                  "architecture",
                  "dependencies",
                  "general"
                ],
                "description": "Type of context to generate",
                "default": "default"
              },
              "depth": {
                "type": "number",
                "description": "Depth of context (1-5, higher means more detailed)",
                "default": 2
              },
              "format": {
                "type": "string",
                "enum": ["json", "markdown", "plain"],
                "description": "Format for the context",
                "default": "json"
              }
            },
            "required": ["repoUrl"]
          }
        },
        {
          "name": "list_cached_repos",
          "description": "List repositories that have been processed and cached",
          "parameters": {
            "type": "object",
            "properties": {}
          }
        },
        {
          "name": "clear_cache",
          "description": "Clear cached repository data",
          "parameters": {
            "type": "object",
            "properties": {
              "repoUrl": {
                "type": "string",
                "description": "URL of the repository to clear (omit to clear all)"
              }
            }
          }
        }
      ]
    }
  ],
  "tools": [
    {
      "name": "summarize",
      "description": "Summarizes text with various style options using local LLM",
      "server": "Content Summarizer",
      "inputs": [
        {
          "name": "text",
          "type": "string",
          "description": "The text to summarize",
          "required": true
        },
        {
          "name": "maxLength",
          "type": "number",
          "description": "Maximum length of the summary in words",
          "default": 200
        },
        {
          "name": "language",
          "type": "string",
          "description": "Language for the summary",
          "default": "en"
        },
        {
          "name": "style",
          "type": "string",
          "description": "Summary style (default, technical, executive, bullet, tldr, academic, critical, eli5)",
          "default": "default"
        }
      ],
      "output": {
        "type": "string",
        "description": "Summarized text"
      }
    },
    {
      "name": "summarize_text",
      "description": "Summarizes text using configured templates",
      "server": "Prompt Engineering Assistant",
      "inputs": [
        {
          "name": "text",
          "type": "string",
          "description": "The text to summarize",
          "required": true
        },
        {
          "name": "template",
          "type": "string",
          "description": "Template name to use (default, technical, executive, bullet, tldr)",
          "default": "default"
        },
        {
          "name": "max_length",
          "type": "number",
          "description": "Maximum length of summary",
          "default": 200
        }
      ],
      "output": {
        "type": "string",
        "description": "Summarized text"
      }
    },
    {
      "name": "docker_exec",
      "description": "Executes a command in a running Docker container",
      "server": "Docker Integration",
      "inputs": [
        {
          "name": "container",
          "type": "string",
          "description": "Container ID or name",
          "required": true
        },
        {
          "name": "command",
          "type": "string",
          "description": "Command to execute",
          "required": true
        },
        {
          "name": "timeout",
          "type": "number",
          "description": "Command timeout in milliseconds",
          "default": 10000
        }
      ],
      "output": {
        "type": "string",
        "description": "Command output"
      }
    },
    {
      "name": "mouse_click",
      "description": "Performs a mouse click at the specified coordinates",
      "server": "Mouse Automation",
      "inputs": [
        {
          "name": "x",
          "type": "number",
          "description": "X coordinate",
          "required": true
        },
        {
          "name": "y",
          "type": "number",
          "description": "Y coordinate",
          "required": true
        },
        {
          "name": "button",
          "type": "string",
          "description": "Mouse button to click (left, right, middle)",
          "default": "left"
        },
        {
          "name": "double",
          "type": "boolean",
          "description": "Whether to perform a double-click",
          "default": false
        }
      ],
      "output": {
        "type": "boolean",
        "description": "Success status"
      }
    },
    {
      "name": "keyboard_press",
      "description": "Simulates a keyboard key press or types text",
      "server": "Mouse Automation",
      "inputs": [
        {
          "name": "key",
          "type": "string",
          "description": "Key to press (e.g., 'a', 'enter', 'escape', 'f1')",
          "required": true
        },
        {
          "name": "modifier",
          "type": "string",
          "description": "Modifier key (e.g., 'ctrl', 'alt', 'shift', 'command')"
        },
        {
          "name": "text",
          "type": "string",
          "description": "Text to type instead of a single key"
        }
      ],
      "output": {
        "type": "boolean",
        "description": "Success status"
      }
    },
    {
      "name": "search_memory",
      "description": "Searches the Knowledge Graph",
      "server": "Knowledge Graph",
      "inputs": [
        {
          "name": "query",
          "type": "string",
          "description": "Search query",
          "required": true
        },
        {
          "name": "limit",
          "type": "number",
          "description": "Maximum number of results",
          "default": 10
        },
        {
          "name": "types",
          "type": "array",
          "description": "Filter by node types",
          "default": []
        },
        {
          "name": "include_relations",
          "type": "boolean",
          "description": "Include relations in results",
          "default": true
        }
      ],
      "output": {
        "type": "object",
        "description": "Search results with nodes and relations"
      }
    },
    {
      "name": "create_entity",
      "description": "Creates a new entity in the knowledge graph",
      "server": "Knowledge Graph",
      "inputs": [
        {
          "name": "name",
          "type": "string",
          "description": "Name of the entity",
          "required": true
        },
        {
          "name": "type",
          "type": "string",
          "description": "Type of the entity (e.g., person, concept, tool)",
          "required": true
        },
        {
          "name": "observations",
          "type": "array",
          "description": "Initial observations about the entity",
          "default": []
        },
        {
          "name": "metadata",
          "type": "object",
          "description": "Additional metadata for the entity",
          "default": {}
        }
      ],
      "output": {
        "type": "object",
        "description": "Created entity information"
      }
    },
    {
      "name": "create_relation",
      "description": "Creates a relationship between two entities",
      "server": "Knowledge Graph",
      "inputs": [
        {
          "name": "from",
          "type": "string",
          "description": "Name of the source entity",
          "required": true
        },
        {
          "name": "to",
          "type": "string",
          "description": "Name of the target entity",
          "required": true
        },
        {
          "name": "type",
          "type": "string",
          "description": "Type of relationship (e.g., depends_on, contains, created_by)",
          "required": true
        },
        {
          "name": "metadata",
          "type": "object",
          "description": "Additional metadata for the relationship",
          "default": {}
        }
      ],
      "output": {
        "type": "object",
        "description": "Created relationship information"
      }
    },
    {
      "name": "add_observation",
      "description": "Adds an observation to an existing entity",
      "server": "Knowledge Graph",
      "inputs": [
        {
          "name": "entity",
          "type": "string",
          "description": "Name of the entity",
          "required": true
        },
        {
          "name": "observation",
          "type": "string",
          "description": "Observation text to add",
          "required": true
        },
        {
          "name": "source",
          "type": "string",
          "description": "Source of the observation",
          "default": "user"
        }
      ],
      "output": {
        "type": "object",
        "description": "Updated entity information"
      }
    },
    {
      "name": "search_entities",
      "description": "Searches for entities in the knowledge graph",
      "server": "Knowledge Graph",
      "inputs": [
        {
          "name": "query",
          "type": "string",
          "description": "Search query",
          "required": true
        },
        {
          "name": "types",
          "type": "array",
          "description": "Filter by entity types",
          "default": []
        },
        {
          "name": "limit",
          "type": "number",
          "description": "Maximum number of results",
          "default": 10
        },
        {
          "name": "include_observations",
          "type": "boolean",
          "description": "Include entity observations in results",
          "default": true
        }
      ],
      "output": {
        "type": "object",
        "description": "Search results with matching entities"
      }
    },
    {
      "name": "get_entity",
      "description": "Retrieves detailed information about an entity",
      "server": "Knowledge Graph",
      "inputs": [
        {
          "name": "name",
          "type": "string",
          "description": "Name of the entity to retrieve",
          "required": true
        },
        {
          "name": "include_relations",
          "type": "boolean",
          "description": "Include relationships in the result",
          "default": true
        }
      ],
      "output": {
        "type": "object",
        "description": "Entity information including observations and relationships"
      }
    },
    {
      "name": "create_entities",
      "server": "Knowledge Graph",
      "description": "Create multiple new entities in the knowledge graph"
    },
    {
      "name": "create_relations",
      "server": "Knowledge Graph",
      "description": "Create multiple new relations between entities in the knowledge graph. Relations should be in active voice"
    },
    {
      "name": "add_observations",
      "server": "Knowledge Graph",
      "description": "Add new observations to existing entities in the knowledge graph"
    },
    {
      "name": "delete_entities",
      "server": "Knowledge Graph",
      "description": "Delete multiple entities and their associated relations from the knowledge graph"
    },
    {
      "name": "delete_observations",
      "server": "Knowledge Graph",
      "description": "Delete specific observations from entities in the knowledge graph"
    },
    {
      "name": "delete_relations",
      "server": "Knowledge Graph",
      "description": "Delete multiple relations from the knowledge graph"
    },
    {
      "name": "search_nodes",
      "server": "Knowledge Graph",
      "description": "Search for nodes in the knowledge graph based on a query"
    },
    {
      "name": "open_nodes",
      "server": "Knowledge Graph",
      "description": "Open specific nodes in the knowledge graph by their names"
    }
  ],
  "mcpServers": {
    "playwright": {
      "command": "npx",
      "args": ["-y", "@executeautomation/playwright-mcp-server"]
    },
    "browser-tools": {
      "command": "npx",
      "args": ["@agentdeskai/browser-tools-server@1.2.0"]
    },
    "knowledge-graph": {
      "command": "node",
      "args": ["./mcp-knowledge-graph/server.js"]
    },
    "repository-tools": {
      "command": "node",
      "args": ["./mcp-servers/repository-tools/server.js"]
    },
    "docker-integration": {
      "command": "node",
      "args": ["./mcp-servers/docker-integration/server.js"]
    },
    "mouse-automation": {
      "command": "node",
      "args": ["./mcp-servers/mouse-automation/server.js"]
    },
    "prompt-engineering": {
      "command": "node",
      "args": ["./mcp-servers/prompt-engineering/server.js"]
    },
    "@smithery-ai-brave-search": {
      "command": "npx",
      "args": [
        "-y",
        "@smithery/cli@latest",
        "run",
        "@smithery-ai/brave-search",
        "--config",
        "{\"braveApiKey\":\"BSAEjLxaT3Id1XDriNigTdhQ3LyOwlz\"}"
      ]
    },
    "mcp-simple-arxiv": {
      "command": "npx",
      "args": [
        "-y",
        "@smithery/cli@latest",
        "run",
        "mcp-simple-arxiv",
        "--config",
        "{}"
      ]
    }
  },
  "services": [
    {
      "name": "Mode Synchronization",
      "description": "Ensures consistent mode display across all components",
      "type": "sse",
      "path": ".cursor/cursor-mode-sync.js",
      "events": [
        {
          "name": "modeChanged",
          "description": "Triggered when the development mode changes",
          "parameters": {
            "mode": {
              "type": "string",
              "description": "The new development mode"
            },
            "emoji": {
              "type": "string",
              "description": "The emoji associated with the mode"
            }
          }
        }
      ],
      "tools": [
        {
          "name": "getCurrentMode",
          "description": "Gets the current development mode",
          "parameters": {},
          "returns": {
            "mode": {
              "type": "string",
              "description": "The current development mode"
            },
            "emoji": {
              "type": "string",
              "description": "The emoji associated with the mode"
            }
          }
        },
        {
          "name": "setMode",
          "description": "Sets the development mode",
          "parameters": {
            "mode": {
              "type": "string",
              "description": "The development mode to set"
            }
          },
          "returns": {
            "success": {
              "type": "boolean",
              "description": "Whether the mode was successfully set"
            },
            "message": {
              "type": "string",
              "description": "Status message about the operation"
            }
          }
        }
      ],
      "startup": true,
      "config": {
        "modesPath": "development-modes",
        "currentModeFile": ".current_mode",
        "availableModes": [
          "design",
          "engineering",
          "testing",
          "deployment",
          "maintenance"
        ],
        "modeEmojis": {
          "design": "🎨",
          "engineering": "🔧",
          "testing": "🧪",
          "deployment": "📦",
          "maintenance": "🔍"
        }
      }
    }
  ]
}
